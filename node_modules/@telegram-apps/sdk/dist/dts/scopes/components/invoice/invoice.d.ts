import { InvoiceStatus, ExecuteWithPostEvent } from '@telegram-apps/bridge';
/**
 * Signal indicating if an invoice is opened.
 */
export declare const isOpened: import('@telegram-apps/signals').Signal<boolean>;
/**
 * Signal indicating if invoices are supported.
 */
export declare const isSupported: import('@telegram-apps/signals').Computed<boolean>;
/**
 * Opens an invoice using its slug.
 * @param slug - invoice slug.
 * @param options - additional options.
 * @since Mini Apps v6.1
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_ALREADY_OPENED
 * @example
 * if (open.isAvailable()) {
 *   const status = await open('kJNFS331');
 * }
 */
export declare function _open(slug: string, options?: ExecuteWithPostEvent): Promise<InvoiceStatus>;
/**
 * Opens an invoice using its url.
 * @param url - invoice URL.
 * @param type - value type.
 * @param options - additional options.
 * @since Mini Apps v6.1
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_ALREADY_OPENED
 * @throws {TypedError} ERR_INVALID_URL
 * @throws {TypedError} ERR_INVALID_SLUG
 * @example
 * if (open.isAvailable()) {
 *   const status = await open('https://t.me/$kJNFS331', 'url');
 * }
 * @example
 * if (open.isAvailable()) {
 *   const status = await open('https://t.me/invoice/kJNFS331', 'url');
 * }
 */
export declare function _open(url: string, type: 'url', options?: ExecuteWithPostEvent): Promise<InvoiceStatus>;
export declare const open: import('../../toolkit/wrapSafe.js').SafeWrapped<typeof _open, true, never>;
