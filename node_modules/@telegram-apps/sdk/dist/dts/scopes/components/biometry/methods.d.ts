import { CancelablePromise, BiometryTokenUpdateStatus, BiometryAuthRequestStatus } from '@telegram-apps/bridge';
import { AuthenticateOptions, RequestAccessOptions, UpdateTokenOptions } from './types.js';
/**
 * @returns True if the biometry manager is supported.
 */
export declare const isSupported: import('@telegram-apps/signals').Computed<boolean>;
/**
 * Attempts to authenticate a user using biometrics and fetch a previously stored secure token.
 * @param options - method options.
 * @since Mini Apps v7.2
 * @returns Token from the local secure storage saved previously or undefined.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @throws {TypedError} ERR_ALREADY_REQUESTING
 * @throws {TypedError} ERR_NOT_AVAILABLE
 * @example
 * if (authenticate.isAvailable()) {
 *   const { status, token } = await authenticate({
 *     reason: 'Authenticate to open wallet',
 *   });
 * }
 */
export declare const authenticate: import('../../toolkit/wrapSafe.js').SafeWrapped<(options?: AuthenticateOptions) => CancelablePromise<{
    /**
     * Authentication status.
     */
    status: BiometryAuthRequestStatus;
    /**
     * Token from the local secure storage saved previously.
     */
    token?: string;
}>, true, never>;
/**
 * Opens the biometric access settings for bots. Useful when you need to request biometrics
 * access to users who haven't granted it yet.
 *
 * _Note that this method can be called only in response to user interaction with the Mini App
 * interface (e.g. a click inside the Mini App or on the main button)_.
 * @since Mini Apps v7.2
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (openSettings.isAvailable()) {
 *   openSettings();
 * }
 */
export declare const openSettings: import('../../toolkit/wrapSafe.js').SafeWrapped<() => void, true, never>;
/**
 * Requests permission to use biometrics.
 * @since Mini Apps v7.2
 * @returns Promise with true, if access was granted.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @throws {TypedError} ERR_ALREADY_REQUESTING
 * @throws {TypedError} ERR_NOT_AVAILABLE
 * @example
 * if (requestAccess.isAvailable()) {
 *   const accessGranted = await requestAccess({
 *     reason: 'Authenticate to open wallet',
 *   });
 * }
 */
export declare const requestAccess: import('../../toolkit/wrapSafe.js').SafeWrapped<(options?: RequestAccessOptions) => CancelablePromise<boolean>, true, never>;
/**
 * Mounts the Biometry component.
 * @since Mini Apps v7.2
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (mount.isAvailable()) {
 *   await mount();
 * }
 */
export declare const mount: import('../../toolkit/wrapSafe.js').SafeWrapped<(options?: import('@telegram-apps/bridge').AsyncOptions | undefined) => CancelablePromise<void>, false, never>;
/**
 * Unmounts the component.
 */
export declare function unmount(): void;
/**
 * Updates the biometric token in a secure storage on the device.
 * @since Mini Apps v7.2
 * @returns Promise with `true`, if token was updated.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @example Setting a new token
 * if (updateToken.isAvailable()) {
 *   updateToken({
 *     token: 'abcdef',
 *   })
 * }
 * @example Deleting the token
 * if (updateToken.isAvailable()) {
 *   updateToken();
 * }
 */
export declare const updateToken: import('../../toolkit/wrapSafe.js').SafeWrapped<(options?: UpdateTokenOptions) => CancelablePromise<BiometryTokenUpdateStatus>, true, never>;
