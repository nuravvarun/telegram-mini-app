import { CancelablePromise, ExecuteWithOptions } from '@telegram-apps/bridge';
interface OpenSharedOptions extends ExecuteWithOptions {
    /**
     * Title to be displayed in the scanner.
     */
    text?: string;
}
/**
 * Closes the scanner.
 * @since Mini Apps v6.4
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (close.isAvailable()) {
 *   close();
 * }
 */
export declare const close: import('../../toolkit/wrapSafe.js').SafeWrapped<() => void, true, never>;
/**
 * True if the scanner is currently opened.
 */
export declare const isOpened: import('@telegram-apps/signals').Signal<boolean>;
/**
 * Signal indicating if the QR Scanner is currently opened.
 */
export declare const isSupported: import('@telegram-apps/signals').Computed<boolean>;
/**
 * Opens the scanner and returns a promise which will be resolved with the QR
 * content if the passed `capture` function returned true.
 *
 * The `capture` option may be ommited. In this case, the first scanned QR
 * will be returned.
 *
 * Promise may also be resolved to undefined if the scanner was closed.
 * @param options - method options.
 * @returns A promise with QR content presented as string or undefined if the
 * scanner was closed.
 * @since Mini Apps v6.4
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_ALREADY_OPENED
 * @example Without `capture` option
 * if (open.isAvailable()) {
 *   const qr = await open({ text: 'Scan any QR' });
 * }
 * @example Using `capture` option
 * if (open.isAvailable()) {
 *   const qr = await open({
 *     text: 'Scan any QR',
 *     capture(scannedQr) {
 *       return scannedQr === 'any expected by me qr';
 *     }
 *   });
 * }
 */
declare function _open(options?: OpenSharedOptions & {
    /**
     * Function, which should return true if the scanned QR should be captured.
     * @param qr - scanned QR content.
     */
    capture?: (qr: string) => boolean;
}): CancelablePromise<string | undefined>;
/**
 * Opens the scanner and calls the `onCaptured` function each time, a QR was
 * scanned.
 *
 * The function returns a promise which will be resolved when the QR scanner
 * was closed. It expects the scanner to be closed externally by a user or
 * via the `close` method.
 * @param options - method options.
 * @since Mini Apps v6.4
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_ALREADY_OPENED
 * @example
 * if (open.isAvailable()) {
 *   const promise = await open({
 *     text: 'Scan any QR',
 *     onCaptured(scannedQr) {
 *       if (scannedQr === 'any expected by me qr') {
 *         close();
 *       }
 *     }
 *   });
 *   console.log('The scanner was closed');
 * }
 */
declare function _open(options: OpenSharedOptions & {
    /**
     * Function which will be called if a QR code was scanned.
     * @param qr - scanned QR content.
     */
    onCaptured: (qr: string) => void;
}): CancelablePromise<void>;
export declare const open: import('../../toolkit/wrapSafe.js').SafeWrapped<typeof _open, true, never>;
export {};
