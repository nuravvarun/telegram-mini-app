import { BottomBarColor, BackgroundColor } from '@telegram-apps/bridge';
import { isRGB } from '@telegram-apps/transformers';
import { Computed } from '@telegram-apps/signals';
import { GetCssVarNameFn, HeaderColor } from './types.js';
/**
 * True if the Mini App component is supported.
 */
export declare const isSupported: Computed<boolean>;
/**
 * Creates CSS variables connected with the mini app.
 *
 * Default variables:
 * - `--tg-bg-color`
 * - `--tg-header-color`
 * - `--tg-bottom-bar-color`
 *
 * Variables are being automatically updated if theme parameters were changed.
 *
 * @param getCSSVarName - function, returning complete CSS variable name for the specified
 * mini app key.
 * @returns Function to stop updating variables.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_VARS_ALREADY_BOUND
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @example Using no arguments
 * if (bindCssVars.isAvailable()) {
 *   bindCssVars();
 * }
 * @example Using custom CSS vars generator
 * if (bindCssVars.isAvailable()) {
 *   bindCssVars(key => `--my-prefix-${key}`);
 * }
 */
export declare const bindCssVars: import('../../toolkit/wrapSafe.js').SafeWrapped<(getCSSVarName?: GetCssVarNameFn) => VoidFunction, true, never>;
/**
 * Closes the Mini App.
 * @param returnBack - should the client return to the previous activity.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @example
 * if (close.isAvailable()) {
 *   close();
 * }
 */
export declare const close: import('../../toolkit/wrapSafe.js').SafeWrapped<(returnBack?: boolean) => void, false, never>;
/**
 * Mounts the component.
 *
 * This function restores the component state and is automatically saving it in the local storage
 * if it changed.
 *
 * Internally, the function mounts the Theme Params component to work with correctly extracted
 * theme palette values.
 * @since Mini Apps v6.1
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (mount.isAvailable()) {
 *   mount();
 * }
 */
export declare const mount: import('../../toolkit/wrapSafe.js').SafeWrapped<() => void, true, never>;
/**
 * Informs the Telegram app that the Mini App is ready to be displayed.
 *
 * It is recommended to call this method as early as possible, as soon as all
 * essential interface elements loaded.
 *
 * Once this method is called, the loading placeholder is hidden and the Mini
 * App shown.
 *
 * If the method is not called, the placeholder will be hidden only when the
 * page was fully loaded.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @example
 * if (ready.isAvailable()) {
 *   ready();
 * }
 */
export declare const ready: import('../../toolkit/wrapSafe.js').SafeWrapped<() => void, false, never>;
/**
 * Updates the background color.
 * @since Mini Apps v6.1
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @example
 * if (setBackgroundColor.isAvailable()) {
 *   setBackgroundColor('bg_color');
 * }
 */
export declare const setBackgroundColor: import('../../toolkit/wrapSafe.js').SafeWrapped<(color: BackgroundColor) => void, true, never>;
/**
 * Updates the bottom bar background color.
 * @since Mini Apps v7.10
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @example
 * if (setBottomBarColor.isAvailable()) {
 *   setBottomBarColor('ff11a3');
 * }
 */
export declare const setBottomBarColor: import('../../toolkit/wrapSafe.js').SafeWrapped<(color: BottomBarColor) => void, true, never>;
/**
 * Updates the header color.
 * @since Mini Apps v6.1
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @example Using known color key
 * if (setHeaderColor.isAvailable()) {
 *   setHeaderColor('bg_color');
 * }
 * @example Using RGB
 * if (setHeaderColor.isAvailable() && setHeaderColor.supports.rgb()) {
 *   setHeaderColor('#ffaabb');
 * }
 */
export declare const setHeaderColor: import('../../toolkit/wrapSafe.js').SafeWrapped<(color: HeaderColor) => void, true, {
    rgb: ["web_app_set_header_color", "color", typeof isRGB];
}>;
/**
 * Unmounts the component, removing the listener, saving the component state in the local storage.
 */
export declare function unmount(): void;
